// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal,
} from "@graphprotocol/graph-ts";

export class JobExperience extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save JobExperience entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type JobExperience must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("JobExperience", id.toString(), this);
    }
  }

  static loadInBlock(id: string): JobExperience | null {
    return changetype<JobExperience | null>(
      store.get_in_block("JobExperience", id),
    );
  }

  static load(id: string): JobExperience | null {
    return changetype<JobExperience | null>(store.get("JobExperience", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get jobExpId(): BigInt {
    let value = this.get("jobExpId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set jobExpId(value: BigInt) {
    this.set("jobExpId", Value.fromBigInt(value));
  }

  get jobExpHash(): string {
    let value = this.get("jobExpHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set jobExpHash(value: string) {
    this.set("jobExpHash", Value.fromString(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get orgAddress(): Bytes {
    let value = this.get("orgAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set orgAddress(value: Bytes) {
    this.set("orgAddress", Value.fromBytes(value));
  }

  get status(): BigInt {
    let value = this.get("status");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set status(value: BigInt) {
    this.set("status", Value.fromBigInt(value));
  }
}
